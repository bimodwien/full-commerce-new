// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Sample {
  id        Int      @id @default(autoincrement())
  name      String
  code      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("samples") // if you want to use snake_case format
}

model User {
  id        Int        @id @default(autoincrement())
  name      String
  email     String     @unique
  username  String     @unique
  role      Role?
  Wishlist  Wishlist[]
  Cart      Cart[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("users")
}

model Product {
  id           Int        @id @default(autoincrement())
  name         String
  description  String?
  price        Int
  stock        Int
  productImage Bytes      @db.LongBlob
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  Category     Category?  @relation(fields: [categoryId], references: [id])
  categoryId   Int?
  Wishlist     Wishlist[]
  Cart         Cart[]

  @@map("products")
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String
  Product   Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("categories")
}

model Wishlist {
  id        Int      @id @default(autoincrement())
  Product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int?
  User      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("wishlists")
}

model Cart {
  id        Int      @id @default(autoincrement())
  quantity  Int
  Product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int?
  User      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("carts")
}

enum Role {
  user
  admin
}
